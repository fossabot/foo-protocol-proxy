# See http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
NO_CLR = \033[0m
AZURE = \033[1;38;5;45m
CYAN = \033[96m
GREEN = \033[1;38;5;113m
OLIVE = \033[1;36;5;113m
MAGENTA = \033[38;5;170m
ORANGE =  \033[1;38;5;208m
RED = \033[91m
YELLOW = \033[93m

INFO_CLR := ${AZURE}
DISCLAIMER_CLR := ${MAGENTA}
ERROR_CLR := ${RED}
HELP_CLR := ${CYAN}
OK_CLR := ${GREEN}
ITEM_CLR := ${OLIVE}
LIST_CLR := ${ORANGE}
WARN_CLR := ${YELLOW}

STAR := ${ITEM_CLR}[${NO_CLR}${INFO_CLR}*${NO_CLR}${ITEM_CLR}]${NO_CLR}
PLUS := ${ITEM_CLR}[${NO_CLR}${WARN_CLR}+${NO_CLR}${ITEM_CLR}]${NO_CLR}

MSG_PRFX := ==>
MSG_SFX := ...

DEPENDENCIES := golang.org/x/lint/golint                 \
                golang.org/x/tools/cmd/cover             \
                github.com/client9/misspell/cmd/misspell \
                github.com/gordonklaus/ineffassign       \
                github.com/mattn/goveralls               \
                github.com/wadey/gocovmerge

## To disable root, you can do "make SUDO=".
SUDO ?= $(shell echo "sudo -E" 2> /dev/null)

## Should do cross compile for other OSs/Architectures or not.
CROSS_BUILD ?= false

# https://github.com/golang/go/blob/master/src/go/build/syslist.go
## List of possible platforms for cross compile.
TARGET_PLATFORMS ?=linux darwin

# amd64 (x86-64), i386 (x86 or x86-32), arm64 (AArch64), arm (ARM), ppc64le (IBM POWER8), s390x (IBM System z) ...etc.
## List of possible architectures for cross compile.
TARGET_ARCHS ?=amd64 i386 arm64 arm ppc64le s390x

## Operating system to build for.
OS ?= $(shell uname -s 2>&1 | tr '[:upper:]' '[:lower:]')

## Architecture to build for.
ARCH ?= amd64

## Extra flags to pass to 'go' when building.
GO_FLAGS ?=

## Version file path
VERSION_FILE ?= $(CURDIR)/.version

## Current version.
VERSION ?= $(shell cat $(VERSION_FILE) 2> /dev/null || git describe --match 'v[0-9]*' --abbrev=0 2> /dev/null || echo NA)

## If true, disable optimizations and does NOT strip the binary.
DEBUG ?= false

## If true, "build" will produce a static binary (cross compile always produce static build regardless).
STATIC ?= true

## Base application directory
APP_DIR ?= app

## Path where the main Go file is located at.
CMD_DIR ?= $(CURDIR)/$(APP_DIR)/cmd/foo-protocol-proxy

## Set an output prefix, which is the local directory if not specified.
ARTIFACTS_PATH ?= $(CURDIR)/.artifacts

## Set the binary directory, where the compiled should go to.
BINARY_PATH ?= ${ARTIFACTS_PATH}/bin

## Set the binary file name prefix.
BINARY_PREFIX ?= $(shell basename $(CURDIR) 2> /dev/null)

## Base path used to install.
INSTALLATION_BASE_PATH ?= /usr/local/bin

## Go generated files.
GO_GENERATED_DIR=.go

## Go package version directory.
PKG_TEMPLATE_DIR ?= ./$(APP_DIR)/pkg/version

## Go package version file.
PKG_TEMPLATE ?= version-template.go.dist

# Tests
## Set tests path.
TESTS_PATH ?= $(GO_GENERATED_DIR)/tests

## Set bench tests path.
BENCH_TESTS_PATH ?= $(TESTS_PATH)/bench

## The times that each test and benchmark would run.
BENCH_TESTS_COUNT ?= 10

## The number of parallel tests.
PARALLEL_TESTS ?= 8

## Test timeout.
TEST_TIMEOUT ?= 8m

# Coverage tests
## Set coverage mode {atomic|count|set}.
COVERAGE_MODE ?= count

## Set coverage path.
COVERAGE_PATH ?= $(TESTS_PATH)/coverage
COVERAGE_PROFILE := $(COVERAGE_PATH)/profile.out
COVERAGE_HTML := $(COVERAGE_PATH)/index.html
COVERAGE_XML := $(COVERAGE_PATH)/profile.xml

# üê≥ Docker configurations

## üê≥ Should build in container or locally.
BUILD_IN_CONTAINER ?= false

## üê≥ Docker build flags.
DOCKER_BUILD_FLAGS ?= --force-rm --rm --no-cache --pull

## üê≥ Docker file path.
DOCKER_FILE ?= .dockerfile-${ARCH}

## Build script directory.
BUILD_SCRIPTS_DIR ?= ./build/scripts

## üê≥ Docker .env file preparation script path.
DOCKER_ENV_FILE_SCRIPT_PATH ?= $(BUILD_SCRIPTS_DIR)/prepare-env-file.sh

## üê≥ Docker file preparation script path.
DOCKER_FILE_SCRIPT_PATH ?= $(BUILD_SCRIPTS_DIR)/prepare-docker-file.sh

## üê≥ Prepare script path.
PREPARE_SCRIPT_PATH ?= $(BUILD_SCRIPTS_DIR)/prepare.sh

## üê≥ Deploy script path.
DEPLOY_SCRIPT_PATH ?= $(BUILD_SCRIPTS_DIR)/deploy.sh

## üê≥ Docker image build tag.
DOCKER_IMAGE_TAG ?= latest

## üê≥ Registry name that image artifacts should be produced for.
REGISTRY ?= $(shell  whoami | sed -e 's|\.||g' 2> /dev/null)

## üê≥ Image name.
IMAGE_NAME ?= $(shell basename $(CURDIR) 2> /dev/null)

## üê≥ Registry repository.
REGISTRY_REPO ?= $(REGISTRY)/$(IMAGE_NAME)

## üê≥ Service name label.
SERVICE_NAME ?= 'Foo Protocol Proxy'

## üê≥ Service description label.
SERVICE_DESCRIPTION ?= 'Proxy Service that communicates over Foo Protocol.'

define PROJECT_LOGO
    # http://patorjk.com/software/taag/#p=display&f=Slant&t=Foo%20Protocol%20Proxy
    @echo "$(1)"
    @cat assets/logo.txt
    @echo "$(NO_CLR)"
endef
